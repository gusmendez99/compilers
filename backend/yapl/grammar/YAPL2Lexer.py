# Generated from ./grammar/YAPL.g4 by ANTLR 4.10
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,40,268,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,5,1,6,
        1,6,1,7,1,7,1,8,1,8,1,9,1,9,1,10,1,10,1,11,1,11,1,12,1,12,1,13,1,
        13,1,14,1,14,1,15,1,15,1,16,1,16,1,16,1,17,1,17,1,18,1,18,1,18,1,
        18,1,18,1,18,1,19,1,19,1,19,1,19,1,19,1,20,1,20,1,20,1,20,1,20,1,
        20,1,21,1,21,1,21,1,22,1,22,1,22,1,23,1,23,1,23,1,24,1,24,1,24,1,
        24,1,24,1,24,1,24,1,24,1,24,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,
        26,1,26,1,26,1,26,1,26,1,27,1,27,1,27,1,27,1,27,1,28,1,28,1,28,1,
        28,1,28,1,29,1,29,1,29,1,29,1,29,1,29,1,30,1,30,1,30,1,30,1,31,1,
        31,1,31,1,31,1,32,1,32,1,32,1,32,1,32,1,33,1,33,1,33,1,33,1,34,1,
        34,5,34,202,8,34,10,34,12,34,205,9,34,1,34,1,34,1,35,1,35,1,35,1,
        35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,5,35,220,8,35,10,35,12,35,
        223,9,35,3,35,225,8,35,1,36,4,36,228,8,36,11,36,12,36,229,1,37,4,
        37,233,8,37,11,37,12,37,234,1,38,4,38,238,8,38,11,38,12,38,239,1,
        38,1,38,1,39,1,39,1,39,1,39,5,39,248,8,39,10,39,12,39,251,9,39,1,
        39,1,39,1,39,1,39,1,39,5,39,258,8,39,10,39,12,39,261,9,39,1,39,1,
        39,3,39,265,8,39,1,39,1,39,1,259,0,40,1,1,3,2,5,3,7,4,9,5,11,6,13,
        7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,
        37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,
        59,30,61,31,63,32,65,33,67,34,69,35,71,36,73,37,75,38,77,39,79,40,
        1,0,7,2,0,0,33,35,255,1,0,65,90,4,0,48,57,65,90,95,95,97,122,1,0,
        48,57,3,0,9,10,13,13,32,32,2,0,0,9,11,255,1,0,10,10,276,0,1,1,0,
        0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,
        0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,
        0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,
        0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,
        0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,
        0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,
        0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,
        0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,1,81,1,0,0,0,
        3,83,1,0,0,0,5,85,1,0,0,0,7,87,1,0,0,0,9,89,1,0,0,0,11,91,1,0,0,
        0,13,94,1,0,0,0,15,96,1,0,0,0,17,98,1,0,0,0,19,100,1,0,0,0,21,102,
        1,0,0,0,23,104,1,0,0,0,25,106,1,0,0,0,27,108,1,0,0,0,29,110,1,0,
        0,0,31,112,1,0,0,0,33,114,1,0,0,0,35,117,1,0,0,0,37,119,1,0,0,0,
        39,125,1,0,0,0,41,130,1,0,0,0,43,136,1,0,0,0,45,139,1,0,0,0,47,142,
        1,0,0,0,49,145,1,0,0,0,51,154,1,0,0,0,53,161,1,0,0,0,55,166,1,0,
        0,0,57,171,1,0,0,0,59,176,1,0,0,0,61,182,1,0,0,0,63,186,1,0,0,0,
        65,190,1,0,0,0,67,195,1,0,0,0,69,199,1,0,0,0,71,224,1,0,0,0,73,227,
        1,0,0,0,75,232,1,0,0,0,77,237,1,0,0,0,79,264,1,0,0,0,81,82,5,59,
        0,0,82,2,1,0,0,0,83,84,5,123,0,0,84,4,1,0,0,0,85,86,5,125,0,0,86,
        6,1,0,0,0,87,88,5,44,0,0,88,8,1,0,0,0,89,90,5,58,0,0,90,10,1,0,0,
        0,91,92,5,60,0,0,92,93,5,45,0,0,93,12,1,0,0,0,94,95,5,40,0,0,95,
        14,1,0,0,0,96,97,5,41,0,0,97,16,1,0,0,0,98,99,5,64,0,0,99,18,1,0,
        0,0,100,101,5,46,0,0,101,20,1,0,0,0,102,103,5,126,0,0,103,22,1,0,
        0,0,104,105,5,42,0,0,105,24,1,0,0,0,106,107,5,47,0,0,107,26,1,0,
        0,0,108,109,5,43,0,0,109,28,1,0,0,0,110,111,5,45,0,0,111,30,1,0,
        0,0,112,113,5,60,0,0,113,32,1,0,0,0,114,115,5,60,0,0,115,116,5,61,
        0,0,116,34,1,0,0,0,117,118,5,61,0,0,118,36,1,0,0,0,119,120,5,99,
        0,0,120,121,5,108,0,0,121,122,5,97,0,0,122,123,5,115,0,0,123,124,
        5,115,0,0,124,38,1,0,0,0,125,126,5,101,0,0,126,127,5,108,0,0,127,
        128,5,115,0,0,128,129,5,101,0,0,129,40,1,0,0,0,130,131,5,102,0,0,
        131,132,5,97,0,0,132,133,5,108,0,0,133,134,5,115,0,0,134,135,5,101,
        0,0,135,42,1,0,0,0,136,137,5,102,0,0,137,138,5,105,0,0,138,44,1,
        0,0,0,139,140,5,105,0,0,140,141,5,102,0,0,141,46,1,0,0,0,142,143,
        5,105,0,0,143,144,5,110,0,0,144,48,1,0,0,0,145,146,5,105,0,0,146,
        147,5,110,0,0,147,148,5,104,0,0,148,149,5,101,0,0,149,150,5,114,
        0,0,150,151,5,105,0,0,151,152,5,116,0,0,152,153,5,115,0,0,153,50,
        1,0,0,0,154,155,5,105,0,0,155,156,5,115,0,0,156,157,5,118,0,0,157,
        158,5,111,0,0,158,159,5,105,0,0,159,160,5,100,0,0,160,52,1,0,0,0,
        161,162,5,108,0,0,162,163,5,111,0,0,163,164,5,111,0,0,164,165,5,
        112,0,0,165,54,1,0,0,0,166,167,5,112,0,0,167,168,5,111,0,0,168,169,
        5,111,0,0,169,170,5,108,0,0,170,56,1,0,0,0,171,172,5,116,0,0,172,
        173,5,104,0,0,173,174,5,101,0,0,174,175,5,110,0,0,175,58,1,0,0,0,
        176,177,5,119,0,0,177,178,5,104,0,0,178,179,5,105,0,0,179,180,5,
        108,0,0,180,181,5,101,0,0,181,60,1,0,0,0,182,183,5,110,0,0,183,184,
        5,101,0,0,184,185,5,119,0,0,185,62,1,0,0,0,186,187,5,110,0,0,187,
        188,5,111,0,0,188,189,5,116,0,0,189,64,1,0,0,0,190,191,5,116,0,0,
        191,192,5,114,0,0,192,193,5,117,0,0,193,194,5,101,0,0,194,66,1,0,
        0,0,195,196,5,108,0,0,196,197,5,101,0,0,197,198,5,116,0,0,198,68,
        1,0,0,0,199,203,5,34,0,0,200,202,7,0,0,0,201,200,1,0,0,0,202,205,
        1,0,0,0,203,201,1,0,0,0,203,204,1,0,0,0,204,206,1,0,0,0,205,203,
        1,0,0,0,206,207,5,34,0,0,207,70,1,0,0,0,208,209,5,83,0,0,209,210,
        5,69,0,0,210,211,5,76,0,0,211,212,5,70,0,0,212,213,5,95,0,0,213,
        214,5,84,0,0,214,215,5,89,0,0,215,216,5,80,0,0,216,225,5,69,0,0,
        217,221,7,1,0,0,218,220,7,2,0,0,219,218,1,0,0,0,220,223,1,0,0,0,
        221,219,1,0,0,0,221,222,1,0,0,0,222,225,1,0,0,0,223,221,1,0,0,0,
        224,208,1,0,0,0,224,217,1,0,0,0,225,72,1,0,0,0,226,228,7,3,0,0,227,
        226,1,0,0,0,228,229,1,0,0,0,229,227,1,0,0,0,229,230,1,0,0,0,230,
        74,1,0,0,0,231,233,7,2,0,0,232,231,1,0,0,0,233,234,1,0,0,0,234,232,
        1,0,0,0,234,235,1,0,0,0,235,76,1,0,0,0,236,238,7,4,0,0,237,236,1,
        0,0,0,238,239,1,0,0,0,239,237,1,0,0,0,239,240,1,0,0,0,240,241,1,
        0,0,0,241,242,6,38,0,0,242,78,1,0,0,0,243,244,5,45,0,0,244,245,5,
        45,0,0,245,249,1,0,0,0,246,248,7,5,0,0,247,246,1,0,0,0,248,251,1,
        0,0,0,249,247,1,0,0,0,249,250,1,0,0,0,250,252,1,0,0,0,251,249,1,
        0,0,0,252,265,7,6,0,0,253,254,5,40,0,0,254,255,5,42,0,0,255,259,
        1,0,0,0,256,258,9,0,0,0,257,256,1,0,0,0,258,261,1,0,0,0,259,260,
        1,0,0,0,259,257,1,0,0,0,260,262,1,0,0,0,261,259,1,0,0,0,262,263,
        5,42,0,0,263,265,5,41,0,0,264,243,1,0,0,0,264,253,1,0,0,0,265,266,
        1,0,0,0,266,267,6,39,0,0,267,80,1,0,0,0,10,0,203,221,224,229,234,
        239,249,259,264,1,6,0,0
    ]

class YAPLLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    T__15 = 16
    T__16 = 17
    T__17 = 18
    CLASS = 19
    ELSE = 20
    FALSE = 21
    FI = 22
    IF = 23
    IN = 24
    INHERITS = 25
    ISVOID = 26
    LOOP = 27
    POOL = 28
    THEN = 29
    WHILE = 30
    NEW = 31
    NOT = 32
    TRUE = 33
    LET = 34
    STRING = 35
    TYPE = 36
    INTEGER = 37
    ID = 38
    WS = 39
    COMMENTS = 40

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "';'", "'{'", "'}'", "','", "':'", "'<-'", "'('", "')'", "'@'", 
            "'.'", "'~'", "'*'", "'/'", "'+'", "'-'", "'<'", "'<='", "'='", 
            "'class'", "'else'", "'false'", "'fi'", "'if'", "'in'", "'inherits'", 
            "'isvoid'", "'loop'", "'pool'", "'then'", "'while'", "'new'", 
            "'not'", "'true'", "'let'" ]

    symbolicNames = [ "<INVALID>",
            "CLASS", "ELSE", "FALSE", "FI", "IF", "IN", "INHERITS", "ISVOID", 
            "LOOP", "POOL", "THEN", "WHILE", "NEW", "NOT", "TRUE", "LET", 
            "STRING", "TYPE", "INTEGER", "ID", "WS", "COMMENTS" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "T__14", "T__15", "T__16", "T__17", "CLASS", "ELSE", "FALSE", 
                  "FI", "IF", "IN", "INHERITS", "ISVOID", "LOOP", "POOL", 
                  "THEN", "WHILE", "NEW", "NOT", "TRUE", "LET", "STRING", 
                  "TYPE", "INTEGER", "ID", "WS", "COMMENTS" ]

    grammarFileName = "YAPL.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.10")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


