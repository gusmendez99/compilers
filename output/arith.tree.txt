(program (klass class A { (feature var : Int <- (expr 0)) ; (feature value ( ) : Int { (expr var) }) ; (feature set_var ( (formal num : Int) ) : SELF_TYPE { (expr { (expr var <- (expr num)) ; (expr self) ; }) }) ; (feature method1 ( (formal num : Int) ) : SELF_TYPE { (expr self) }) ; (feature method2 ( (formal num1 : Int) , (formal num2 : Int) ) : B { (expr ( (expr let (let_formal x : Int) in (expr { (expr x <- (expr (expr num1) + (expr num2))) ; (expr (expr ( (expr new B) )) . set_var ( (expr x) )) ; })) )) }) ; (feature method3 ( (formal num : Int) ) : C { (expr ( (expr let (let_formal x : Int) in (expr { (expr x <- (expr ~ (expr num))) ; (expr (expr ( (expr new C) )) . set_var ( (expr x) )) ; })) )) }) ; (feature method4 ( (formal num1 : Int) , (formal num2 : Int) ) : D { (expr if (expr (expr num2) < (expr num1)) then (expr ( (expr let (let_formal x : Int) in (expr { (expr x <- (expr (expr num1) - (expr num2))) ; (expr (expr ( (expr new D) )) . set_var ( (expr x) )) ; })) )) else (expr ( (expr let (let_formal x : Int) in (expr { (expr x <- (expr (expr num2) - (expr num1))) ; (expr (expr ( (expr new D) )) . set_var ( (expr x) )) ; })) )) fi) }) ; (feature method5 ( (formal num : Int) ) : E { (expr ( (expr let (let_formal x : Int <- (expr 1)) in (expr { (expr ( (expr let (let_formal y : Int <- (expr 1)) in (expr while (expr (expr y) <= (expr num)) loop (expr { (expr x <- (expr (expr x) * (expr y))) ; (expr y <- (expr (expr y) + (expr 1))) ; }) pool)) )) ; (expr (expr ( (expr new E) )) . set_var ( (expr x) )) ; })) )) }) ; }) ; (klass class B inherits A { (feature method5 ( (formal num : Int) ) : E { (expr ( (expr let (let_formal x : Int) in (expr { (expr x <- (expr (expr num) * (expr num))) ; (expr (expr ( (expr new E) )) . set_var ( (expr x) )) ; })) )) }) ; }) ; (klass class C inherits B { (feature method6 ( (formal num : Int) ) : A { (expr ( (expr let (let_formal x : Int) in (expr { (expr x <- (expr ~ (expr num))) ; (expr (expr ( (expr new A) )) . set_var ( (expr x) )) ; })) )) }) ; (feature method5 ( (formal num : Int) ) : E { (expr ( (expr let (let_formal x : Int) in (expr { (expr x <- (expr (expr (expr num) * (expr num)) * (expr num))) ; (expr (expr ( (expr new E) )) . set_var ( (expr x) )) ; })) )) }) ; }) ; (klass class D inherits B { (feature method7 ( (formal num : Int) ) : Bool { (expr ( (expr let (let_formal x : Int <- (expr num)) in (expr if (expr (expr x) < (expr 0)) then (expr method7 ( (expr ~ (expr x)) )) else (expr if (expr (expr 0) = (expr x)) then (expr true) else (expr if (expr (expr 1) = (expr x)) then (expr false) else (expr if (expr (expr 2) = (expr x)) then (expr false) else (expr method7 ( (expr (expr x) - (expr 3)) )) fi) fi) fi) fi)) )) }) ; }) ; (klass class E inherits D { (feature method6 ( (formal num : Int) ) : A { (expr ( (expr let (let_formal x : Int) in (expr { (expr x <- (expr (expr num) / (expr 8))) ; (expr (expr ( (expr new A) )) . set_var ( (expr x) )) ; })) )) }) ; }) ; (klass class Main inherits IO { (feature char : String) ; (feature avar : A) ; (feature a_var : A) ; (feature flag : Bool <- (expr true)) ; (feature is_even ( (formal num : Int) ) : Bool { (expr ( (expr let (let_formal x : Int <- (expr num)) in (expr if (expr (expr x) < (expr 0)) then (expr is_even ( (expr ~ (expr x)) )) else (expr if (expr (expr 0) = (expr x)) then (expr true) else (expr if (expr (expr 1) = (expr x)) then (expr false) else (expr is_even ( (expr (expr x) - (expr 2)) )) fi) fi) fi)) )) }) ; (feature main ( ) : Object { (expr { (expr avar <- (expr ( (expr new A) ))) ; (expr (expr avar) . set_var ( (expr 2) )) ; (expr out_int ( (expr (expr avar) . value ( )) )) ; (expr if (expr is_even ( (expr (expr avar) . value ( )) )) then (expr out_string ( (expr  es par!\n) )) else (expr out_string ( (expr  es impar!\n) )) fi) ; (expr a_var <- (expr (expr ( (expr new A) )) . set_var ( (expr 3) ))) ; (expr avar <- (expr (expr ( (expr new B) )) . method2 ( (expr (expr avar) . value ( )) , (expr (expr a_var) . value ( )) ))) ; (expr out_int ( (expr (expr avar) . value ( )) )) ; (expr out_string ( (expr \n) )) ; (expr avar <- (expr (expr ( (expr new C) )) . method6 ( (expr (expr avar) . value ( )) ))) ; (expr out_int ( (expr (expr avar) . value ( )) )) ; (expr out_string ( (expr \n) )) ; (expr a_var <- (expr (expr ( (expr new A) )) . set_var ( (expr 5) ))) ; (expr avar <- (expr (expr ( (expr new D) )) . method4 ( (expr (expr avar) . value ( )) , (expr (expr a_var) . value ( )) ))) ; (expr out_int ( (expr (expr avar) . value ( )) )) ; (expr out_string ( (expr \n) )) ; (expr (expr avar) . set_var ( (expr 5) )) ; (expr avar <- (expr (expr ( (expr new C) )) @ A . method5 ( (expr (expr avar) . value ( )) ))) ; (expr out_int ( (expr (expr avar) . value ( )) )) ; (expr out_string ( (expr \n) )) ; (expr (expr avar) . set_var ( (expr 6) )) ; (expr avar <- (expr (expr ( (expr new C) )) @ B . method5 ( (expr (expr avar) . value ( )) ))) ; (expr out_int ( (expr (expr avar) . value ( )) )) ; (expr out_string ( (expr \n) )) ; }) }) ; }) ; <EOF>)
