(program (klass class List { (feature isNil ( ) : Bool { (expr true) }) ; (feature head ( ) : Int { (expr { (expr abort ( )) ; (expr 0) ; }) }) ; (feature tail ( ) : List { (expr { (expr abort ( )) ; (expr self) ; }) }) ; (feature cons ( (formal i : Int) ) : List { (expr (expr ( (expr new Cons) )) . init ( (expr i) , (expr self) )) }) ; }) ; (klass class Cons inherits List { (feature car : Int) ; (feature cdr : List) ; (feature isNil ( ) : Bool { (expr false) }) ; (feature head ( ) : Int { (expr car) }) ; (feature tail ( ) : List { (expr cdr) }) ; (feature init ( (formal i : Int) , (formal rest : List) ) : List { (expr { (expr car <- (expr i)) ; (expr cdr <- (expr rest)) ; (expr self) ; }) }) ; }) ; (klass class Main inherits IO { (feature mylist : List) ; (feature print_list ( (formal l : List) ) : Object { (expr if (expr (expr l) . isNil ( )) then (expr out_string ( (expr \n) )) else (expr { (expr out_int ( (expr (expr l) . head ( )) )) ; (expr out_string ( (expr  ) )) ; (expr print_list ( (expr (expr l) . tail ( )) )) ; }) fi) }) ; (feature main ( ) : Object { (expr { (expr mylist <- (expr (expr (expr (expr (expr (expr new List) . cons ( (expr 1) )) . cons ( (expr 2) )) . cons ( (expr 3) )) . cons ( (expr 4) )) . cons ( (expr 5) ))) ; (expr while (expr ( (expr not (expr (expr mylist) . isNil ( ))) )) loop (expr { (expr print_list ( (expr mylist) )) ; (expr mylist <- (expr (expr mylist) . tail ( ))) ; }) pool) ; }) }) ; }) ; <EOF>)
