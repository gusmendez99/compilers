(program (klass class Factorial { (feature var : Int <- (expr 0)) ; (feature factorial ( (formal n : Int) ) : Int { (expr { (expr ( (expr let (let_formal f : Int) in (expr if (expr (expr n) = (expr 0)) then (expr f <- (expr 0)) else (expr if (expr (expr n) = (expr 1)) then (expr f <- (expr 1)) else (expr f <- (expr (expr n) * (expr factorial ( (expr (expr n) - (expr 1)) )))) fi) fi)) )) ; }) }) ; }) ; (klass class Fibonacci { (feature fibonacci ( (formal n : Int) ) : Int { (expr { (expr ( (expr let (let_formal f : Int) in (expr if (expr (expr n) = (expr 1)) then (expr f <- (expr 1)) else (expr if (expr (expr n) = (expr 2)) then (expr f <- (expr 1)) else (expr f <- (expr (expr fibonacci ( (expr (expr n) - (expr 1)) )) + (expr fibonacci ( (expr (expr n) - (expr 2)) )))) fi) fi)) )) ; }) }) ; }) ; (klass class Main inherits IO { (feature n : Int <- (expr 10)) ; (feature facto : Factorial) ; (feature fibo : Fibonacci) ; (feature main ( ) : SELF_TYPE { (expr { (expr facto <- (expr new Factorial)) ; (expr fibo <- (expr new Fibonacci)) ; (expr out_int ( (expr (expr fibo) . fibonacci ( (expr n) )) )) ; (expr self) ; }) }) ; }) ; <EOF>)
