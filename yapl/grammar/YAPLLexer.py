# Generated from ./grammar/YAPL.g4 by ANTLR 4.10
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,49,324,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
        45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,1,0,3,0,103,8,0,1,0,1,
        0,1,0,1,0,1,1,4,1,110,8,1,11,1,12,1,111,1,1,1,1,1,2,1,2,1,2,1,2,
        5,2,120,8,2,10,2,12,2,123,9,2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,5,
        3,133,8,3,10,3,12,3,136,9,3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,
        1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,
        1,8,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,10,1,10,1,10,1,11,1,11,1,11,
        1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,
        1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,15,1,16,
        1,16,1,16,1,16,1,16,1,17,1,17,1,17,1,17,1,17,1,18,1,18,1,18,1,18,
        1,18,1,19,1,19,1,19,1,19,1,19,1,19,1,20,1,20,1,20,1,20,1,20,1,21,
        1,21,1,21,1,21,1,21,1,22,1,22,1,22,1,22,1,23,1,23,1,23,1,24,1,24,
        1,24,1,24,1,25,1,25,5,25,247,8,25,10,25,12,25,250,9,25,1,26,1,26,
        5,26,254,8,26,10,26,12,26,257,9,26,1,27,1,27,5,27,261,8,27,10,27,
        12,27,264,9,27,1,28,1,28,1,29,1,29,1,30,1,30,1,31,1,31,1,32,1,32,
        1,33,1,33,1,34,1,34,1,34,1,35,1,35,1,35,1,36,1,36,1,37,1,37,1,38,
        1,38,1,39,1,39,1,40,1,40,1,41,1,41,1,42,1,42,1,43,1,43,1,44,1,44,
        1,45,1,45,1,45,1,46,1,46,1,47,1,47,1,48,1,48,1,48,1,48,3,48,313,
        8,48,1,49,1,49,1,49,5,49,318,8,49,10,49,12,49,321,9,49,1,49,1,49,
        1,319,0,50,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,
        12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,
        23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,
        34,69,35,71,36,73,37,75,38,77,39,79,40,81,41,83,42,85,43,87,44,89,
        45,91,46,93,47,95,48,97,0,99,49,1,0,25,3,0,9,10,12,13,32,32,1,0,
        10,10,1,0,116,116,2,0,82,82,114,114,2,0,85,85,117,117,2,0,69,69,
        101,101,1,0,102,102,2,0,65,65,97,97,2,0,76,76,108,108,2,0,83,83,
        115,115,2,0,67,67,99,99,2,0,70,70,102,102,2,0,73,73,105,105,2,0,
        78,78,110,110,2,0,72,72,104,104,2,0,84,84,116,116,2,0,86,86,118,
        118,2,0,79,79,111,111,2,0,68,68,100,100,2,0,80,80,112,112,2,0,87,
        87,119,119,1,0,65,90,4,0,48,57,65,90,95,95,97,122,1,0,97,122,1,0,
        48,57,332,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,
        0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,
        0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,
        0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,
        0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,
        0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,
        0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,
        0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,
        0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,0,89,1,
        0,0,0,0,91,1,0,0,0,0,93,1,0,0,0,0,95,1,0,0,0,0,99,1,0,0,0,1,102,
        1,0,0,0,3,109,1,0,0,0,5,115,1,0,0,0,7,128,1,0,0,0,9,141,1,0,0,0,
        11,146,1,0,0,0,13,151,1,0,0,0,15,156,1,0,0,0,17,162,1,0,0,0,19,168,
        1,0,0,0,21,171,1,0,0,0,23,174,1,0,0,0,25,177,1,0,0,0,27,186,1,0,
        0,0,29,193,1,0,0,0,31,197,1,0,0,0,33,202,1,0,0,0,35,207,1,0,0,0,
        37,212,1,0,0,0,39,217,1,0,0,0,41,223,1,0,0,0,43,228,1,0,0,0,45,233,
        1,0,0,0,47,237,1,0,0,0,49,240,1,0,0,0,51,244,1,0,0,0,53,251,1,0,
        0,0,55,258,1,0,0,0,57,265,1,0,0,0,59,267,1,0,0,0,61,269,1,0,0,0,
        63,271,1,0,0,0,65,273,1,0,0,0,67,275,1,0,0,0,69,277,1,0,0,0,71,280,
        1,0,0,0,73,283,1,0,0,0,75,285,1,0,0,0,77,287,1,0,0,0,79,289,1,0,
        0,0,81,291,1,0,0,0,83,293,1,0,0,0,85,295,1,0,0,0,87,297,1,0,0,0,
        89,299,1,0,0,0,91,301,1,0,0,0,93,304,1,0,0,0,95,306,1,0,0,0,97,312,
        1,0,0,0,99,314,1,0,0,0,101,103,5,13,0,0,102,101,1,0,0,0,102,103,
        1,0,0,0,103,104,1,0,0,0,104,105,5,10,0,0,105,106,1,0,0,0,106,107,
        6,0,0,0,107,2,1,0,0,0,108,110,7,0,0,0,109,108,1,0,0,0,110,111,1,
        0,0,0,111,109,1,0,0,0,111,112,1,0,0,0,112,113,1,0,0,0,113,114,6,
        1,0,0,114,4,1,0,0,0,115,116,5,45,0,0,116,117,5,45,0,0,117,121,1,
        0,0,0,118,120,8,1,0,0,119,118,1,0,0,0,120,123,1,0,0,0,121,119,1,
        0,0,0,121,122,1,0,0,0,122,124,1,0,0,0,123,121,1,0,0,0,124,125,5,
        10,0,0,125,126,1,0,0,0,126,127,6,2,0,0,127,6,1,0,0,0,128,129,5,45,
        0,0,129,130,5,45,0,0,130,134,1,0,0,0,131,133,8,1,0,0,132,131,1,0,
        0,0,133,136,1,0,0,0,134,132,1,0,0,0,134,135,1,0,0,0,135,137,1,0,
        0,0,136,134,1,0,0,0,137,138,5,0,0,1,138,139,1,0,0,0,139,140,6,3,
        0,0,140,8,1,0,0,0,141,142,5,40,0,0,142,143,5,42,0,0,143,144,1,0,
        0,0,144,145,6,4,0,0,145,10,1,0,0,0,146,147,5,42,0,0,147,148,5,41,
        0,0,148,149,1,0,0,0,149,150,6,5,0,0,150,12,1,0,0,0,151,152,7,2,0,
        0,152,153,7,3,0,0,153,154,7,4,0,0,154,155,7,5,0,0,155,14,1,0,0,0,
        156,157,7,6,0,0,157,158,7,7,0,0,158,159,7,8,0,0,159,160,7,9,0,0,
        160,161,7,5,0,0,161,16,1,0,0,0,162,163,7,10,0,0,163,164,7,8,0,0,
        164,165,7,7,0,0,165,166,7,9,0,0,166,167,7,9,0,0,167,18,1,0,0,0,168,
        169,7,11,0,0,169,170,7,12,0,0,170,20,1,0,0,0,171,172,7,12,0,0,172,
        173,7,11,0,0,173,22,1,0,0,0,174,175,7,12,0,0,175,176,7,13,0,0,176,
        24,1,0,0,0,177,178,7,12,0,0,178,179,7,13,0,0,179,180,7,14,0,0,180,
        181,7,5,0,0,181,182,7,3,0,0,182,183,7,12,0,0,183,184,7,15,0,0,184,
        185,7,9,0,0,185,26,1,0,0,0,186,187,7,12,0,0,187,188,7,9,0,0,188,
        189,7,16,0,0,189,190,7,17,0,0,190,191,7,12,0,0,191,192,7,18,0,0,
        192,28,1,0,0,0,193,194,7,8,0,0,194,195,7,5,0,0,195,196,7,15,0,0,
        196,30,1,0,0,0,197,198,7,8,0,0,198,199,7,17,0,0,199,200,7,17,0,0,
        200,201,7,19,0,0,201,32,1,0,0,0,202,203,7,19,0,0,203,204,7,17,0,
        0,204,205,7,17,0,0,205,206,7,8,0,0,206,34,1,0,0,0,207,208,7,15,0,
        0,208,209,7,14,0,0,209,210,7,5,0,0,210,211,7,13,0,0,211,36,1,0,0,
        0,212,213,7,5,0,0,213,214,7,8,0,0,214,215,7,9,0,0,215,216,7,5,0,
        0,216,38,1,0,0,0,217,218,7,20,0,0,218,219,7,14,0,0,219,220,7,12,
        0,0,220,221,7,8,0,0,221,222,7,5,0,0,222,40,1,0,0,0,223,224,7,10,
        0,0,224,225,7,7,0,0,225,226,7,9,0,0,226,227,7,5,0,0,227,42,1,0,0,
        0,228,229,7,5,0,0,229,230,7,9,0,0,230,231,7,7,0,0,231,232,7,10,0,
        0,232,44,1,0,0,0,233,234,7,13,0,0,234,235,7,5,0,0,235,236,7,20,0,
        0,236,46,1,0,0,0,237,238,7,17,0,0,238,239,7,11,0,0,239,48,1,0,0,
        0,240,241,7,13,0,0,241,242,7,17,0,0,242,243,7,15,0,0,243,50,1,0,
        0,0,244,248,7,21,0,0,245,247,7,22,0,0,246,245,1,0,0,0,247,250,1,
        0,0,0,248,246,1,0,0,0,248,249,1,0,0,0,249,52,1,0,0,0,250,248,1,0,
        0,0,251,255,7,23,0,0,252,254,7,22,0,0,253,252,1,0,0,0,254,257,1,
        0,0,0,255,253,1,0,0,0,255,256,1,0,0,0,256,54,1,0,0,0,257,255,1,0,
        0,0,258,262,7,24,0,0,259,261,7,24,0,0,260,259,1,0,0,0,261,264,1,
        0,0,0,262,260,1,0,0,0,262,263,1,0,0,0,263,56,1,0,0,0,264,262,1,0,
        0,0,265,266,5,40,0,0,266,58,1,0,0,0,267,268,5,41,0,0,268,60,1,0,
        0,0,269,270,5,123,0,0,270,62,1,0,0,0,271,272,5,125,0,0,272,64,1,
        0,0,0,273,274,5,59,0,0,274,66,1,0,0,0,275,276,5,58,0,0,276,68,1,
        0,0,0,277,278,5,60,0,0,278,279,5,45,0,0,279,70,1,0,0,0,280,281,5,
        61,0,0,281,282,5,62,0,0,282,72,1,0,0,0,283,284,5,126,0,0,284,74,
        1,0,0,0,285,286,5,44,0,0,286,76,1,0,0,0,287,288,5,46,0,0,288,78,
        1,0,0,0,289,290,5,64,0,0,290,80,1,0,0,0,291,292,5,42,0,0,292,82,
        1,0,0,0,293,294,5,43,0,0,294,84,1,0,0,0,295,296,5,45,0,0,296,86,
        1,0,0,0,297,298,5,47,0,0,298,88,1,0,0,0,299,300,5,60,0,0,300,90,
        1,0,0,0,301,302,5,60,0,0,302,303,5,61,0,0,303,92,1,0,0,0,304,305,
        5,61,0,0,305,94,1,0,0,0,306,307,9,0,0,0,307,96,1,0,0,0,308,309,5,
        92,0,0,309,313,5,34,0,0,310,311,5,92,0,0,311,313,5,92,0,0,312,308,
        1,0,0,0,312,310,1,0,0,0,313,98,1,0,0,0,314,319,5,34,0,0,315,318,
        3,97,48,0,316,318,9,0,0,0,317,315,1,0,0,0,317,316,1,0,0,0,318,321,
        1,0,0,0,319,320,1,0,0,0,319,317,1,0,0,0,320,322,1,0,0,0,321,319,
        1,0,0,0,322,323,5,34,0,0,323,100,1,0,0,0,11,0,102,111,121,134,248,
        255,262,312,317,319,1,6,0,0
    ]

class YAPLLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    NEWLINE = 1
    WS = 2
    LINECOMMENT = 3
    LINECOMMENTEOF = 4
    BEGINCOMMENT = 5
    ENDCOMMENT = 6
    TRUE = 7
    FALSE = 8
    CLASS = 9
    FI = 10
    IF = 11
    IN = 12
    INHERITS = 13
    ISVOID = 14
    LET = 15
    LOOP = 16
    POOL = 17
    THEN = 18
    ELSE = 19
    WHILE = 20
    CASE = 21
    ESAC = 22
    NEW = 23
    OF = 24
    NOT = 25
    TYPE = 26
    ID = 27
    INT_CONST = 28
    LPAREN = 29
    RPAREN = 30
    LBRACE = 31
    RBRACE = 32
    SEMI = 33
    COLON = 34
    ASSIGN = 35
    DARROW = 36
    NEG = 37
    COMMA = 38
    PERIOD = 39
    AT = 40
    MUL = 41
    ADD = 42
    MINUS = 43
    DIV = 44
    LT = 45
    LEQ = 46
    EQ = 47
    ERROR = 48
    STR_CONST = 49

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'(*'", "'*)'", "'('", "')'", "'{'", "'}'", "';'", "':'", "'<-'", 
            "'=>'", "'~'", "','", "'.'", "'@'", "'*'", "'+'", "'-'", "'/'", 
            "'<'", "'<='", "'='" ]

    symbolicNames = [ "<INVALID>",
            "NEWLINE", "WS", "LINECOMMENT", "LINECOMMENTEOF", "BEGINCOMMENT", 
            "ENDCOMMENT", "TRUE", "FALSE", "CLASS", "FI", "IF", "IN", "INHERITS", 
            "ISVOID", "LET", "LOOP", "POOL", "THEN", "ELSE", "WHILE", "CASE", 
            "ESAC", "NEW", "OF", "NOT", "TYPE", "ID", "INT_CONST", "LPAREN", 
            "RPAREN", "LBRACE", "RBRACE", "SEMI", "COLON", "ASSIGN", "DARROW", 
            "NEG", "COMMA", "PERIOD", "AT", "MUL", "ADD", "MINUS", "DIV", 
            "LT", "LEQ", "EQ", "ERROR", "STR_CONST" ]

    ruleNames = [ "NEWLINE", "WS", "LINECOMMENT", "LINECOMMENTEOF", "BEGINCOMMENT", 
                  "ENDCOMMENT", "TRUE", "FALSE", "CLASS", "FI", "IF", "IN", 
                  "INHERITS", "ISVOID", "LET", "LOOP", "POOL", "THEN", "ELSE", 
                  "WHILE", "CASE", "ESAC", "NEW", "OF", "NOT", "TYPE", "ID", 
                  "INT_CONST", "LPAREN", "RPAREN", "LBRACE", "RBRACE", "SEMI", 
                  "COLON", "ASSIGN", "DARROW", "NEG", "COMMA", "PERIOD", 
                  "AT", "MUL", "ADD", "MINUS", "DIV", "LT", "LEQ", "EQ", 
                  "ERROR", "ESC", "STR_CONST" ]

    grammarFileName = "YAPL.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.10")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


